---
launch:
  - arg: {name: conf_name}
  - arg: {name: sim_time}
  - arg: {name: robot_name}
  - arg: {name: camera, default: none}
  - arg: {name: roman_env, default: $(env ADT4_ENV)/roman}
  - arg: {name: spark_env, default: $(env ADT4_ENV)/spark_env}

  # Zed camera driver (has to be above push_ros_namespace)
  - arg: {name: launch_zed, default: 'false'}
  - include:
      if: $(var launch_zed)
      file: $(find-pkg-share zed_wrapper)/launch/zed_camera.launch.py
      arg:
        - {name: namespace, value: $(var robot_name)}
        - {name: camera_model, value: zed2i}
        - {name: camera_name, value: $(var camera)}
        - {name: publish_tf, value: 'false'}
  
  - push_ros_namespace: {namespace: $(var robot_name)}

  # Hydra
  - arg: {name: launch_hydra, default: 'false'}
  - arg: {name: disable_hydra_publish_dsg, default: 'false'}
  - group:
    - set_remap: {from: hydra/status, to: ros_system_monitor/hydra/status}
    - include:
        if: $(var launch_hydra)
        file: $(find-pkg-share dcist_launch_system)/launch/hydra/spot.launch.yaml
        arg:
          - {name: conf_name, value: $(var conf_name)}
          - {name: use_sim_time, value: $(var sim_time)}
          - {name: disable_publish_dsg, value: $(var disable_hydra_publish_dsg)}
          - {name: camera, value: $(var camera)}

  # Hydra Visualizer
  - arg: {name: launch_hydra_visualizer, default: 'false'}
  - group:
      - set_remap: {from: hydra_visualizer/dsg, to: hydra/backend/dsg}
      - include:
          if: $(var launch_hydra_visualizer)
          file: $(find-pkg-share hydra_visualizer)/launch/streaming_visualizer.launch.yaml
          arg:
            - {name: use_sim_time, value: $(var sim_time)}
            - {name: start_rviz, value: 'false'}
            - {name: visualizer_frame, value: $(var robot_name)/map}
            - {name: visualizer_config_path, value: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/hydra_visualizer_config.yaml}

  # Hydra-Multi
  - arg: {name: launch_hydra_multi, default: 'false'}
  - group:
    - set_remap: {from: hydra_multi/status, to: ros_system_monitor/hydra_multi/status}
    - include:
        if: $(var launch_hydra_multi)
        file: $(find-pkg-share dcist_launch_system)/launch/hydra_multi/multi_session.launch.yaml
        arg:
          - {name: conf_name, value: $(var conf_name)}
          - {name: use_sim_time, value: $(var sim_time)}

  # ROMAN
  - arg: {name: launch_fastsam, default: 'false'}
  - arg: {name: launch_roman_map, default: 'false'}
  - arg: {name: launch_roman_lc, default: 'false'}
  - group:
      - set_remap: {from: color/camera_info, to: $(var camera)/rgb/camera_info}
      - set_remap: {from: color/image_raw, to: $(var camera)/rgb/image_rect_color}
      - set_remap: {from: depth/camera_info, to: $(var camera)/depth/camera_info}
      - set_remap: {from: depth/image_raw, to: $(var camera)/depth/depth_registered}
      - set_remap: {from: tf, to: /tf}
      - set_remap: {from: tf_static, to: /tf_static}
      - set_remap: {from: roman/fastsam/status, to: ros_system_monitor/node_diagnostic_collector}
      - set_remap: {from: roman/roman_map/status, to: ros_system_monitor/node_diagnostic_collector}
      - set_remap: {from: roman/roman_lc/status, to: ros_system_monitor/node_diagnostic_collector}

      # FastSAM
      - include:
          if: $(var launch_fastsam)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/fastsam.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}

      # ROMAN: Mapping
      - include:
          if: $(var launch_roman_map)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/roman_map.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}

      # ROMAN: Loop Closures
      - include:
          if: $(var launch_roman_lc)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/roman_lc.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}

  # Spot Executor
  - arg: {name: launch_spot_executor, default: 'false'}
  - pyenv_node:
      if: "$(var launch_spot_executor)"
      pkg: spot_tools_ros
      exec: spot_executor_node
      name: spot_executor_node
      pyenv: $(var spark_env)
      param:
          - {name: use_sim_time, value: $(var sim_time)}
          - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/spot_executor_node.yaml
            allow_substs: true
      remap:
          - from: ~/node_status
            to: ros_system_monitor/node_diagnostic_collector
          - from: ~/action_sequence_subscriber
            to: omniplanner_node/compiled_plan_out
          - from: ~/joint_states
            to: joint_states

  # Spot state publisher
  - let: {name: robot_color, value: $(if $(eval '"$(var robot_name)" == "hamilton"') yellow purple)}
  - arg: {name: launch_spot_state_publisher, default: 'false'}
  - node:
      if: "$(var launch_spot_state_publisher)"
      pkg: robot_state_publisher
      name: robot_state_publisher
      exec: robot_state_publisher
      param:
          - {name: use_sim_time, value: $(var sim_time)}
          - name: robot_description
            value: $(command 'xacro $(find-pkg-share spot_tools_ros)/urdf/spot.urdf.xacro tf_prefix:=$(var robot_name)/ spot_color:=$(var robot_color)')
      remap:
          - from: /joint_states
            to: joint_states
  - node:
      if: "$(var launch_spot_state_publisher)"
      pkg: robot_state_publisher
      name: cameras_state_publisher
      exec: robot_state_publisher
      param:
          - {name: use_sim_time, value: $(var sim_time)}
          - name: robot_description
            value: $(command 'xacro $(find-pkg-share dcist_launch_system)/urdf/topaz.urdf.xacro tf_prefix:=$(var robot_name)')

  # Spot camera driver
  - arg: {name: launch_spot_camera_driver, default: 'false'}
  - group:
    - pyenv_node:
        if: "$(var launch_spot_camera_driver)"
        pkg: spot_tools_ros
        exec: spot_sensor_node
        name: spot_sensor_node
        pyenv: $(var spark_env)
        param:
            - {name: use_sim_time, value: $(var sim_time)}
            - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/spot_sensor_node.yaml
              allow_substs: true

  - arg: {name: launch_spot_camera_decompression, default: 'false'}
  - group:
    - node:
        if: "$(var launch_spot_camera_decompression)"
        namespace: frontleft
        pkg: image_transport
        exec: republish
        param:
          - {name: in_transport, value: compressed}
          - {name: out_transport, value: raw}
        remap:
          - {from: in/compressed, to: color/image_raw/compressed}
          - {from: out, to: color/image_raw}
    - node:
        if: "$(var launch_spot_camera_decompression)"
        namespace: frontright
        pkg: image_transport
        exec: republish
        param:
          - {name: in_transport, value: compressed}
          - {name: out_transport, value: raw}
        remap:
          - {from: in/compressed, to: color/image_raw/compressed}
          - {from: out, to: color/image_raw}

  # Rviz
  - arg: {name: 'launch_rviz', default: 'false'}
  - node:
      if: "$(var launch_rviz)"
      pkg: rviz2
      exec: "rviz2"
      name: "rviz2_node"
      args: "-d $(find-pkg-share dcist_launch_system)/rviz/dcist.rviz"
      remap:
        - from: ~/node_status
          to: ros_system_monitor/node_diagnostic_collector
      param:
          - {name: use_sim_time, value: $(var sim_time)}


  # Omniplanner
  - arg:
      name: launch_omniplanner
      default: "false"
  - pyenv_node:
      if: $(var launch_omniplanner)
      pkg: omniplanner_ros
      exec: omniplanner_node
      name: omniplanner_node
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/omniplanner_node.yaml
          allow_substs: true
      remap:
        - from: ~/node_status
          to: ros_system_monitor/node_diagnostic_collector
        - from: ~/dsg_in
          to: hydra/backend/dsg
        - from: ~/llm_response
          to: rviz2_node/llm_response

  # Scene Graph Publisher
  - arg:
      name: launch_scene_graph_publisher
      default: "false"
  - pyenv_node:
      if: $(var launch_scene_graph_publisher)
      pkg: dcist_launch_system
      exec: prior_dsg_publisher_node
      name: prior_dsg_publisher
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/prior_dsg_publisher.yaml
          allow_substs: true

      remap:
        - from: ~/dsg_out
          to: hydra/backend/dsg


  # DSG Saver
  - arg:
      name: launch_dsg_saver
      default: "false"
  - pyenv_node:
      if: $(var launch_dsg_saver)
      pkg: dcist_launch_system
      exec: dsg_saver_node
      name: dsg_saver
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/dsg_saver_node.yaml
          allow_substs: true

      remap:
        - from: ~/dsg_in
          to: hydra/backend/dsg
        - from: ~/node_status
          to: ros_system_monitor/node_diagnostic_collector

  - arg:
      name: launch_static_map_to_robot
      default: "false"
  - node:
      if: $(var launch_static_map_to_robot)
      pkg: tf2_ros
      exec: static_transform_publisher
      args: --frame-id map --child-frame-id $(var robot_name)/map --x 10 --y 20 --yaw 1.57
