---
launch:
  - arg: {name: conf_name}
  - arg: {name: robot_type}
  - arg: {name: robot_name}
  - arg: {name: camera, default: none}

  # Example Node 1
  - arg: {name: launch_example_1_node, default: 'false'}
  - node:
      if: $(var launch_example_1_node)
      pkg: dcist_launch_system
      exec: example_1_node
      name: example_1_node
      param:
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/example_1_node.yaml

  # Nominal Node
  - arg: {name: launch_nominal_node, default: 'false'}
  - node:
      if: $(var launch_nominal_node)
      pkg: ros_system_monitor
      exec: example_monitored_node
      name: nominal_monitored_node
      param:
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/nominal_monitored_node.yaml
      remap:
        - {from: ~/node_status, to: /ros_system_monitor/node_diagnostic_collector}

  # Warning Node
  - arg: {name: launch_warning_node, default: 'false'}
  - node:
      if: $(var launch_warning_node)
      pkg: ros_system_monitor
      exec: example_monitored_node
      name: warning_monitored_node
      param:
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/warning_monitored_node.yaml
      remap:
        - {from: ~/node_status, to: /ros_system_monitor/node_diagnostic_collector}

  # Example 2 Node
  - arg: {name: launch_example_2_node, default: 'false'}
  - node: {if: $(var launch_example_2_node), pkg: dcist_launch_system, exec: example_2_node, name: example_2_node}

  # Hydra
  - arg: {name: launch_hydra, default: 'false'}
  - set_remap: {if: $(var launch_hydra), from: hydra/status, to: /ros_system_monitor/hydra/status}
  - include:
      if: $(var launch_hydra)
      file: $(find-pkg-share dcist_launch_system)/launch/hydra/spot.launch.yaml
      arg:
        - {name: conf_name, value: $(var conf_name)}

  # Hydra Visualizer
  - arg: {name: launch_hydra_visualizer, default: 'false'}
  - set_remap: {if: $(var launch_hydra_visualizer), from: hydra_visualizer/dsg, to: hydra/backend/dsg}
  - include:
      if: $(var launch_hydra_visualizer)
      file: $(find-pkg-share hydra_visualizer)/launch/streaming_visualizer.launch.yaml
      arg:
        - {name: start_rviz, value: 'false'}
        - {name: visualizer_frame, value: map}

  # ROMAN
  - arg: {name: launch_fastsam, default: 'false'}
  - arg: {name: launch_roman_map, default: 'false'}
  - group:
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: color/camera_info, to: camera/$(var camera)/camera_info}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: color/image_raw, to: camera/$(var camera)/image}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: depth/camera_info, to: camera/$(var camera)/camera_info}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: depth/image_raw, to: depth/$(var camera)/depth_in_visual}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: /$(var robot_name)/tf, to: /tf}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: /$(var robot_name)/tf_static, to: /tf_static}
      - set_remap: {if: $(eval "'$(var robot_name)' == 'spot'"), from: color/image_raw, to: camera/$(var camera)/image}
      - set_remap: {from: /$(var robot_name)/roman/fastsam/status, to: /ros_system_monitor/node_diagnostic_collector}
      - set_remap: {from: /$(var robot_name)/roman/roman_map/status, to: /ros_system_monitor/node_diagnostic_collector}
      
      # FastSAM
      - include: 
          if: $(var launch_fastsam)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/fastsam.launch.yaml
          arg:
            - {name: robot_name, value: $(var robot_name)}
            - {name: robot_type, value: $(var robot_type)}

      # ROMAN: Mapping
      - include: 
          if: $(var launch_roman_map)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/roman_map.launch.yaml
          arg:
            - {name: robot_name, value: $(var robot_name)}
            - {name: robot_type, value: $(var robot_type)}

  # Spot Executor
  - arg: {name: launch_spot_executor, default: 'false'}
  - node:
      if: "$(var launch_spot_executor)"
      pkg: spot_tools_ros
      exec: spot_executor_node
      name: spot_executor_node
      param:
          - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/spot_executor_node.yaml
            allow_substs: true
      remap:
          - from: ~/node_status
            to: /ros_system_monitor/node_diagnostic_collector

  # Spot state publisher
  - arg: {name: launch_spot_state_publisher, default: 'false'}
  - node:
      if: "$(var launch_spot_state_publisher)"
      pkg: robot_state_publisher
      name: robot_state_publisher
      exec: robot_state_publisher
      param:
          - name: robot_description
            value: $(command 'xacro $(find-pkg-share dcist_launch_system)/urdf/spot.urdf.xacro')
      remap:
          - from: /joint_states
            to: /spot_executor_node/joint_states

  # Rviz
  - arg: {name: 'launch_rviz', default: 'false'}
  - node:
      if: "$(var launch_rviz)"
      pkg: rviz2
      exec: "rviz2"
      name: "rviz2_node"
      args: "-d $(find-pkg-share dcist_launch_system)/rviz/dcist.rviz"


  - arg:
      name: launch_omniplanner
      default: "false"
  - node:
      if: $(var launch_omniplanner)
      pkg: omniplanner_ros
      exec: omniplanner_node
      name: omniplanner_node
      param:
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/omniplanner_node.yaml
      remap:
        - from: ~/node_status
          to: /ros_system_monitor/node_diagnostic_collector
        - from: ~/dsg_in
          to: /hydra/backend/dsg


  - arg:
      name: launch_scene_graph_publisher
      default: "false"
  - node:
      if: $(var launch_scene_graph_publisher)
      pkg: dcist_launch_system
      exec: prior_dsg_publisher_node
      name: prior_dsg_publisher
      param:
        - from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/prior_dsg_publisher.yaml
          allow_substs: true

      remap:
        - from: ~/dsg_out
          to: /hydra/backend/dsg
