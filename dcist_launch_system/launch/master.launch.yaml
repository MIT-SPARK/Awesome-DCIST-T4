---
launch:
  - arg: {name: conf_name}
  - arg: {name: sim_time}
  - arg: {name: robot_name}
  - arg: {name: roman_env, default: $(env ADT4_ENV)/roman}
  - arg: {name: spark_env, default: $(env ADT4_ENV)/spark_env}
  - let: {name: camera, value: $(var robot_name)_zed}
  - let: {name: platform_id, value: $(env ADT4_PLATFORM_ID topaz)}
  - let: {name: output_dir, value: $(env ADT4_OUTPUT_DIR)}
  - let: {name: semantic_inference_labelspace_name, value: ade20k_mit}
  - let: {name: semantic_inference_model_name, value: ade20k-efficientvit_seg_l2}

  # Zed camera driver (has to be above push_ros_namespace)
  - arg: {name: launch_zed, default: 'false'}
  - include:
      if: $(var launch_zed)
      file: $(find-pkg-share zed_wrapper)/launch/zed_camera.launch.py
      arg:
        - {name: namespace, value: $(var robot_name)}
        - {name: camera_model, value: zed2i}
        - {name: camera_name, value: $(var camera)}
        - {name: publish_tf, value: 'false'}
        - {name: ros_params_override_path, value: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/zed_overrides.yaml}

  # Force robot name prefix for everything!
  - push_ros_namespace: {namespace: $(var robot_name)}

  # livox driver
  - arg: {name: launch_livox, default: 'false'}
  - node:
      if: $(var launch_livox)
      pkg: livox_ros_driver2
      exec: livox_ros_driver2_node
      name: livox_lidar_publisher
      param:
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/livox.yaml}
        - {name: frame_id, value: $(var robot_name)/livox}
        - {name: user_config_path, value: $(find-pkg-share dcist_launch_system)/platforms/$(var platform_id)/livox.yaml}

  # Efficient-ViT
  - arg: {name: launch_semantic_inference, default: 'false'}
  - node:
      if: $(var launch_semantic_inference)
      pkg: semantic_inference_ros
      exec: closed_set_node
      namespace: $(var camera)
      name: segmentation
      remap:
        - {from: color/image_raw, to: rgb/image_rect_color}
      args: >
        --config-utilities-file $(find-pkg-share semantic_inference_ros)/config/models/$(var semantic_inference_model_name).yaml
        --config-utilities-file $(find-pkg-share semantic_inference_ros)/config/label_groupings/$(var semantic_inference_labelspace_name).yaml@output/recolor
        --config-utilities-yaml {output: {recolor: {colormap_path: $(find-pkg-share semantic_inference_ros)/config/distinct_150_colors.csv}}}
        --config-utilities-yaml {segmenter: {model: {model_file: $(var semantic_inference_model_name).onnx}}}
        --config-utilities-file $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/semantic_inference.yaml
        --config-utilities-file $(find-pkg-share dcist_launch_system)/platforms/$(var platform_id)/semantic_inference_overrides.yaml

  # Hydra
  - arg: {name: launch_hydra, default: 'false'}
  - node:
      if: $(var launch_hydra)
      pkg: hydra_ros
      exec: hydra_ros_node
      name: hydra
      param:
        - {name: use_sim_time, value: $(var sim_time)}
      remap:
        - {from: ~/input/camera/depth_registered/image_rect, to: $(var camera)/depth/depth_registered}
        - {from: ~/input/camera/rgb/image_raw, to: $(var camera)/rgb/image_rect_color}
        - {from: ~/input/camera/rgb/camera_info, to: $(var camera)/rgb/camera_info}
        - {from: ~/input/camera/semantic/image_raw, to: $(var camera)/semantic/image_raw}
        - {from: ~/status, to: ros_system_monitor/hydra/status}
      args: >-
        --config-utilities-var robot_name=$(var robot_name)
        --config-utilities-file $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/hydra.yaml
        --config-utilities-file $(find-pkg-share hydra)/config/label_spaces/$(var semantic_inference_labelspace_name)_label_space.yaml
        --config-utilities-yaml {glog_level: 0, glog_verbosity: 0}
        --config-utilities-yaml {log_path: $(var output_dir)/hydra, output: {use_timestamp: false, overwrite: true}}

  # Hydra Visualizer
  - arg: {name: launch_hydra_visualizer, default: 'false'}
  - node:
      if: $(var launch_hydra_visualizer)
      pkg: hydra_visualizer
      exec: hydra_visualizer_node
      name: hydra_visualizer
      param:
        - {name: use_sim_time, value: $(var sim_time)}
      remap:
        - {from: ~/dsg, to: hydra/backend/dsg}
      args: >
        --config-utilities-var robot_name=$(var robot_name)
        --config-utilities-file $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/hydra_visualizer_config.yaml
        --config-utilities-file $(find-pkg-share hydra_visualizer)/config/visualizer_plugins.yaml
        --config-utilities-file $(find-pkg-share hydra_visualizer)/config/external_plugins.yaml
        --config-utilities-yaml {glog_level: 1, glog_verbosity: 0}

  # Hydra-Multi
  - arg: {name: launch_hydra_multi, default: 'false'}
  - node:
      if: $(var launch_hydra_multi)
      pkg: hydra_multi_ros
      exec: hydra_multi_ros_node
      name: hydra_multi
      param:
        - {name: use_sim_time, value: $(var sim_time)}
      remap:
        - {from: ~/external_loop_closures, to: roman/roman_lc/pose_graph_update}
        - {from: ~/status, to: ros_system_monitor/hydra_multi/status}
      args: >
        --config-utilities-var robot_name=$(var robot_name)
        --config-utilities-file $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/hydra_multi.yaml
        --config-utilities-yaml {glog_level: 0, glog_verbosity: 0}
        --config-utilities-yaml {log_path: $(var output_dir)/hydra_multi, output: {use_timestamp: false, overwrite: true}}

  # Hydra-Multi Visualizer
  - arg: {name: launch_hydra_multi_visualizer, default: 'false'}
  - node:
      if: $(var launch_hydra_multi_visualizer)
      pkg: hydra_visualizer
      exec: hydra_visualizer_node
      name: hydra_multi_visualizer
      param:
        - {name: use_sim_time, value: $(var sim_time)}
      remap:
        - {from: ~/dsg, to: hydra_multi/backend/dsg}
      args: >
        --config-utilities-var robot_name=$(var robot_name)
        --config-utilities-file $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/hydra_multi_visualizer_config.yaml
        --config-utilities-yaml {glog_level: 1, glog_verbosity: 0}

  # ROMAN
  - arg: {name: launch_fastsam, default: 'false'}
  - arg: {name: launch_roman_map, default: 'false'}
  - arg: {name: launch_roman_lc, default: 'false'}
  - group:
      - set_remap: {from: color/camera_info, to: $(var camera)/rgb/camera_info}
      - set_remap: {from: color/image_raw, to: $(var camera)/rgb/image_rect_color}
      - set_remap: {from: depth/camera_info, to: $(var camera)/depth/camera_info}
      - set_remap: {from: depth/image_raw, to: $(var camera)/depth/depth_registered}
      - set_remap: {from: tf, to: /tf}
      - set_remap: {from: tf_static, to: /tf_static}
      - set_remap: {from: roman/fastsam/status, to: ros_system_monitor/node_diagnostic_collector}
      - set_remap: {from: roman/roman_map/status, to: ros_system_monitor/node_diagnostic_collector}
      - set_remap: {from: roman/roman_lc/status, to: ros_system_monitor/node_diagnostic_collector}

      # FastSAM
      - include:
          if: $(var launch_fastsam)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/fastsam.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}

      # ROMAN: Mapping
      - include:
          if: $(var launch_roman_map)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/roman_map.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}
            - {name: output_dir, value: $(var output_dir)}

      # ROMAN: Loop Closures
      - include:
          if: $(var launch_roman_lc)
          file: $(find-pkg-share dcist_launch_system)/launch/roman/roman_lc.launch.yaml
          arg:
            - {name: conf_name, value: $(var conf_name)}
            - {name: pyenv_path, value: $(var roman_env)}
            - {name: output_dir, value: $(var output_dir)}
            - {name: use_sim_time, value: $(var sim_time)}

  # Spot Executor
  - arg: {name: launch_spot_executor, default: 'false'}
  - pyenv_node:
      if: $(var launch_spot_executor)
      pkg: spot_tools_ros
      exec: spot_executor_node
      name: spot_executor_node
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/spot_executor_node.yaml, allow_substs: true}
      remap:
        - {from: ~/node_status, to: ros_system_monitor/node_diagnostic_collector}
        - {from: ~/action_sequence_subscriber, to: omniplanner_node/compiled_plan_out}
        - {from: ~/joint_states, to: joint_states}
        - {from: ~/occupancy_grid, to: hydra/tsdf/occupancy}

  # Spot state publisher
  - arg: {name: launch_spot_state_publisher, default: 'false'}
  - let: {name: robot_color, value: $(if $(eval '"$(var robot_name)" == "hamilton"') yellow purple)}
  - let:
      name: spot_urdf_command
      value: >
        xacro $(find-pkg-share spot_tools_ros)/urdf/spot.urdf.xacro
              tf_prefix:=$(var robot_name)/
              spot_color:=$(var robot_color)
  - node:
      if: $(var launch_spot_state_publisher)
      pkg: robot_state_publisher
      name: robot_state_publisher
      exec: robot_state_publisher
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {name: robot_description, value: $(command $(var spot_urdf_command))}
      remap:
        - {from: /joint_states, to: joint_states}
  - node:
      if: $(var launch_spot_state_publisher)
      pkg: dcist_launch_system
      exec: static_tf_from_json
      args: >
        $(find-pkg-share dcist_launch_system)/platforms/$(var platform_id)/zed_calibration.json
        --frame-id $(var robot_name)/frontleft
        --child-frame-id $(var robot_name)_zed_camera_link

  # Spot camera driver
  - arg: {name: launch_spot_camera_driver, default: 'false'}
  - pyenv_node:
      if: $(var launch_spot_camera_driver)
      pkg: spot_tools_ros
      exec: spot_sensor_node
      name: spot_sensor_node
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/spot_sensor_node.yaml, allow_substs: true}

  # Decompression for spot camera topics
  - arg: {name: launch_spot_camera_decompression, default: 'false'}
  - group:
      - include:
          if: $(var launch_spot_camera_decompression)
          file: $(find-pkg-share dcist_launch_system)/launch/utils/decompress_camera.launch.yaml
          arg:
            - {name: camera_ns, value: frontleft}
      - include:
          if: $(var launch_spot_camera_decompression)
          file: $(find-pkg-share dcist_launch_system)/launch/utils/decompress_camera.launch.yaml
          arg:
            - {name: camera_ns, value: frontright}

  # Decompression for zed
  - arg: {name: launch_zed_camera_decompression, default: 'false'}
  - group:
      - node:
          if: $(var launch_zed_camera_decompression)
          namespace: $(var robot_name)_zed
          pkg: image_transport
          exec: republish
          param:
            - {name: in_transport, value: compressed}
            - {name: out_transport, value: raw}
          remap:
            - {from: in/compressed, to: rgb/image_rect_color/compressed}
            - {from: out, to: rgb/image_rect_color}

  # Rviz
  - arg: {name: launch_rviz, default: 'false'}
  - node:
      if: $(var launch_rviz)
      pkg: rviz2
      exec: rviz2
      name: rviz2_node
      args: -d $(find-pkg-share dcist_launch_system)/rviz/dcist.rviz
      remap:
        - {from: ~/node_status, to: ros_system_monitor/node_diagnostic_collector}
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/rviz_node.yaml, allow_substs: true}

  # Omniplanner
  - arg: {name: launch_omniplanner, default: 'false'}
  - pyenv_node:
      if: $(var launch_omniplanner)
      pkg: omniplanner_ros
      exec: omniplanner_node
      name: omniplanner_node
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/omniplanner_node.yaml, allow_substs: true}
      remap:
        - {from: ~/node_status, to: ros_system_monitor/node_diagnostic_collector}
        - {from: ~/dsg_in, to: hydra/backend/dsg}
        - {from: ~/llm_response, to: rviz2_node/llm_response}

  # Scene Graph Publisher
  - arg: {name: launch_scene_graph_publisher, default: 'false'}
  - pyenv_node:
      if: $(var launch_scene_graph_publisher)
      pkg: dcist_launch_system
      exec: prior_dsg_publisher_node
      name: prior_dsg_publisher
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/prior_dsg_publisher.yaml, allow_substs: true}
      remap:
        - {from: ~/dsg_out, to: hydra/backend/dsg}

  # DSG Saver
  - arg: {name: launch_dsg_saver, default: 'false'}
  - pyenv_node:
      if: $(var launch_dsg_saver)
      pkg: dcist_launch_system
      exec: dsg_saver_node
      name: dsg_saver
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/dsg_saver_node.yaml, allow_substs: true}
      remap:
        - {from: ~/dsg_in, to: hydra/backend/dsg}
        - {from: ~/node_status, to: ros_system_monitor/node_diagnostic_collector}

  # dsg_analyzer
  - arg: {name: launch_dsg_analyzer, default: 'false'}
  - pyenv_node:
      if: $(var launch_dsg_analyzer)
      pkg: dsg_analyzer_ros
      exec: dsg_analyzer_node
      name: dsg_analyzer
      pyenv: $(var spark_env)
      remap:
        - {from: ~/dsg_in, to: hydra/backend/dsg}
        - {from: ~/dsg_stats_out, to: dsg_analyzer/dsg_stats}

  # Static TF to replace Hydra multi map->robot/map TF.
  # Non-identity transform for verification.
  - arg: {name: launch_static_map_to_robot_map, default: 'false'}
  - node:
      if: $(var launch_static_map_to_robot_map)
      pkg: tf2_ros
      exec: static_transform_publisher
      args: --frame-id map --child-frame-id $(var robot_name)/map --x 10 --y 20 --yaw 1.57

  # Static TF to replace Hydra backend TF with non-identity transform for verification
  # This node is used to replace the backend TF from hydra, when we are running planning offline.
  - arg: {name: launch_static_robot_map_to_odom, default: 'false'}
  - node:
      if: $(var launch_static_robot_map_to_odom)
      pkg: tf2_ros
      exec: static_transform_publisher
      args: --frame-id $(var robot_name)/map --child-frame-id $(var robot_name)/odom --x 5 --y 10 --yaw 1.57


  - arg: {name: launch_heracles_publisher, default: 'false'}
  - pyenv_node:
      if: $(var launch_heracles_publisher)
      pkg: heracles_ros
      exec: heracles_publisher_node
      name: heracles_publisher_node
      pyenv: $(var spark_env)
      param:
        - {name: use_sim_time, value: $(var sim_time)}
        - {from: $(find-pkg-share dcist_launch_system)/config/$(var conf_name)/heracles_publisher_node.yaml, allow_substs: true}
      remap:
        - from: ~/dsg_out
          to: hydra/backend/dsg

  # gps
  - arg: { name: launch_gps, default: 'false' }
  - group:
    - set_remap: {from: gps/status, to: ros_system_monitor/node_diagnostic_collector}
    - set_remap: {from: ntrip/status, to: ros_system_monitor/node_diagnostic_collector}
    - set_remap: {from: /rtcm, to: rtcm}
    - set_remap: {from: ublox_gps_node/fix, to: fix}
    - include:
        if: $(var launch_gps)
        file: $(find-pkg-share gps_dcist)/launch/ublox.launch.py
    - include:
        if: $(var launch_gps)
        file: $(find-pkg-share gps_dcist)/launch/upenn_ntrip.launch.py
    - node:
        if: $(var launch_gps)
        pkg: gps_dcist
        exec: gps_monitor_node
        name: gps_monitor_node
    - node:
        if: $(var launch_gps)
        pkg: gps_dcist
        exec: ntrip_monitor_node
        name: ntrip_monitor_node
