#!/usr/bin/env python3

import os
import pathlib
import readline # noqa
import shutil
import subprocess
import sys

import click
import rich
from rich.columns import Columns


def _ws_path():
    return pathlib.Path(__file__).absolute().parent.parent


@click.command()
@click.argument("session_path", type=click.Path(), default=None, required=False)
@click.option("--tmuxp-args", default=None, help="args to forward to tmuxp")
@click.option("--robot-name", envvar="ADT4_ROBOT_NAME", prompt=True, help="robot name to use")
@click.option("--output-dir", envvar="ADT4_OUTPUT_DIR", prompt=True, help="output directory for system")
@click.option("--sim-time", "-s", is_flag=True, help="use sim time")
@click.option("--force", "-f", is_flag=True, help="clear output if it exists")
def main(session_path, tmuxp_args, robot_name, output_dir, sim_time, force):
    tmux_ws_path = _ws_path() / "tmux" / "autogenerated"
    if session_path is None:
        tmux_files = sorted([x for x in tmux_ws_path.glob("*.yaml")])
        rich.print(Columns([f"({i + 1}) {x.stem}" for i, x in enumerate(tmux_files)]))
        session_idx = click.prompt("What session do you want to load?", default=1)
        if session_idx <= 0 or session_idx > len(tmux_files):
            click.secho(f"Invalid session choice: '{session_idx}'", fg="red")
            return 1

        session_path = tmux_files[session_idx - 1]

    session_path = pathlib.Path(session_path).expanduser()
    session_path = tmux_ws_path / session_path
    if not session_path.exists():
        click.secho(f"Invalid tmuxp session filepath: '{session_path}'", fg="red")
        return 1

    output_dir = pathlib.Path(output_dir).expanduser().absolute()
    if output_dir.exists():
        if not force:
            click.confirm(f"Output directory '{output_dir}' exists! Remove?", abort=True)

        click.secho(f"Clearing previous output: '{output_dir}'", fg="green")
        shutil.rmtree(output_dir)

    env = os.environ.copy()
    env["ADT4_ROBOT_NAME"] = robot_name
    env["ADT4_SIM_TIME"] = "true" if sim_time else "false"
    env["ADT4_OUTPUT_DIR"] = output_dir
    cmd = [shutil.which("tmuxp"), "load", str(session_path)] + tmuxp_args.split(" ")
    return subprocess.run(cmd, env=env).returncode


if __name__ == "__main__":
    sys.exit(main())
