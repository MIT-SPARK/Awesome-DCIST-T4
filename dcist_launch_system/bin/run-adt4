#!/usr/bin/env python3

import atexit
import os
import pathlib
import pprint
import readline
import shlex
import shutil
import subprocess
import sys

import click
import rich
from rich.columns import Columns
from rich.table import Table

ADT4_VARS = [
    "ADT4_ROBOT_NAME",
    "ADT4_PLATFORM_ID",
    "ADT4_OUTPUT_DIR",
    "ADT4_PRIOR_MAP",
    "ADT4_SIM_TIME",
]


def _ws_path():
    return pathlib.Path(__file__).absolute().parent.parent


@click.command()
@click.argument("session_path", type=click.Path(), default=None, required=False)
@click.option("--tmuxp-args", default=None, help="args to forward to tmuxp")
@click.option("--robot-name", "-n", envvar="ADT4_ROBOT_NAME", help="robot name to use")
@click.option(
    "--platform-id",
    "-c",
    envvar="ADT4_PLATFORM_ID",
    help="robot platform adt4 is running on",
)
@click.option(
    "--output-dir",
    "-o",
    envvar="ADT4_OUTPUT_DIR",
    type=click.Path(),
    help="output for adt4",
)
@click.option(
    "--prior-map",
    "-p",
    envvar="ADT4_PRIOR_MAP",
    help="prior map",
    is_flag=False,
    flag_value="???",
    type=click.Path(),
)
@click.option("--sim-time", "-s", is_flag=True, help="use sim time")
@click.option("--yes", "-y", is_flag=True, help="skip env variable check")
@click.option("--force", "-f", is_flag=True, help="clear output if it exists")
def main(
    session_path,
    tmuxp_args,
    robot_name,
    platform_id,
    output_dir,
    prior_map,
    sim_time,
    yes,
    force,
):
    robot_name = robot_name or input("robot name to use? ")
    platform_id = platform_id or input("robot platform ID? ")
    output_dir = output_dir or input("output directory? ")

    # NOTE(nathan) this only triggers when someone wants to be prompted for a prior map
    # and doesn't want to add it via command line.
    if prior_map == "???":
        prior_map = input("prior map? ")
        if not prior_map:
            click.secho("No prior map entered! Continuing...", fg="yellow")

    if prior_map:
        prior_map = pathlib.Path(prior_map).expanduser().absolute()
        if not prior_map.exists():
            click.secho(f"Invalid prior map: '{prior_map}'!", fg="red")
            return 1

    tmux_ws_path = _ws_path() / "tmux" / "autogenerated"
    tmux_files = sorted([x for x in tmux_ws_path.glob("*.yaml")])
    if session_path is None:
        rich.print(Columns([f"({i + 1}) {x.stem}" for i, x in enumerate(tmux_files)]))
        session_idx = click.prompt("What session do you want to load?", default=1)
        if session_idx <= 0 or session_idx > len(tmux_files):
            click.secho(f"Invalid session choice: '{session_idx}'", fg="red")
            return 1

        session_path = tmux_files[session_idx - 1]

    session_path = pathlib.Path(session_path).expanduser()
    session_path = tmux_ws_path / session_path
    if not session_path.exists():
        click.secho(
            f"Invalid tmuxp session filepath: '{session_path}'! Available:", fg="red"
        )
        click.echo(f"Available: {pprint.pformat([x.stem for x in tmux_files])}")
        return 1

    output_dir = pathlib.Path(output_dir).expanduser().absolute()
    if output_dir.exists():
        if not force:
            click.confirm(
                f"Output directory '{output_dir}' exists! Remove?", abort=True
            )

        click.secho(f"Clearing previous output: '{output_dir}'", fg="green")
        shutil.rmtree(output_dir)

    env = os.environ.copy()
    env["ADT4_ROBOT_NAME"] = robot_name
    env["ADT4_PLATFORM_ID"] = platform_id
    env["ADT4_SIM_TIME"] = "true" if sim_time else "false"
    env["ADT4_OUTPUT_DIR"] = str(output_dir)
    if prior_map:
        env["ADT4_PRIOR_MAP"] = str(prior_map)

    table = Table(title="Environment Variables")
    table.add_column("Environment Variable", justify="left", style="cyan")
    table.add_column("Value", justify="right")
    for name in ADT4_VARS:
        table.add_row(name, env.get(name) or "---")

    click.secho(f"Loading {session_path}...", fg="green")
    rich.print(table)
    if not yes:
        click.confirm("Are the settings correct?", abort=True)

    cmd = [shutil.which("tmuxp"), "load", str(session_path)]
    if tmuxp_args:
        cmd += shlex.split(tmuxp_args)

    return subprocess.run(cmd, env=env).returncode


if __name__ == "__main__":
    readline_history = pathlib.Path("~/.adt4_history").expanduser().absolute()
    if readline_history.exists():
        readline.read_history_file(str(readline_history))

    readline.set_history_length(1000)
    atexit.register(readline.write_history_file, readline_history)
    sys.exit(main())
